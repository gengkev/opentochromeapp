// Compiled on 6/23/2011 using the Closure Compiler, with simple optimization.
// http://closure-compiler.appspot.com/

// Changed RSA SHA1 & SHA256 hex functions to use different library


//
// rsa-sign.js - adding signing functions to RSAKey class.
//
//
// version: 1.0 (2010-Jun-03)
//
// Copyright (c) 2010 Kenji Urushima (kenji.urushima@gmail.com)
//
// This software is licensed under the terms of the MIT License.
// http://www.opensource.org/licenses/mit-license.php
//
// The above copyright and license notice shall be 
// included in all copies or substantial portions of the Software.

//
// Depends on:
//   function sha1.hex(s) of sha1.js
//   jsbn.js
//   jsbn2.js
//   rsa.js
//   rsa2.js
//

// keysize / pmstrlen
//  512 /  128
// 1024 /  256
// 2048 /  512
// 4096 / 1024

// As for _RSASGIN_DIHEAD values for each hash algorithm, see PKCS#1 v2.1 spec (p38).
var _RSASIGN_DIHEAD = [];
_RSASIGN_DIHEAD['sha1'] = "3021300906052b0e03021a05000414";
_RSASIGN_DIHEAD['sha256'] = "3031300d060960864801650304020105000420";
//_RSASIGN_DIHEAD['md2'] = "3020300c06082a864886f70d020205000410";
//_RSASIGN_DIHEAD['md5'] = "3020300c06082a864886f70d020505000410";
//_RSASIGN_DIHEAD['sha384'] = "3041300d060960864801650304020205000430";
//_RSASIGN_DIHEAD['sha512'] = "3051300d060960864801650304020305000440";
var _RSASIGN_HASHHEXFUNC = [];
//_RSASIGN_HASHHEXFUNC['sha1'] = sha1.hex;
//_RSASIGN_HASHHEXFUNC['sha256'] = sha256.hex;

_RSASIGN_HASHHEXFUNC['sha1'] = hex_sha1;
_RSASIGN_HASHHEXFUNC['sha256'] = hex_sha256;

// ========================================================================
// Signature Generation
// ========================================================================

function _rsasign_getHexPaddedDigestInfoForString(a,c,b){c/=4;for(var a=(0,_RSASIGN_HASHHEXFUNC[b])(a),b="00"+_RSASIGN_DIHEAD[b]+a,a="",c=c-4-b.length,d=0;d<c;d+=2)a+="ff";return sPaddedMessageHex="0001"+a+b}function _rsasign_signString(a,c){var b=_rsasign_getHexPaddedDigestInfoForString(a,this.n.bitLength(),c);return this.doPrivate(parseBigInt(b,16)).toString(16)}
function _rsasign_signStringWithSHA1(a){a=_rsasign_getHexPaddedDigestInfoForString(a,this.n.bitLength(),"sha1");return this.doPrivate(parseBigInt(a,16)).toString(16)}function _rsasign_signStringWithSHA256(a){a=_rsasign_getHexPaddedDigestInfoForString(a,this.n.bitLength(),"sha256");return this.doPrivate(parseBigInt(a,16)).toString(16)};

// ========================================================================
// Signature Verification
// ========================================================================

function _rsasign_getDecryptSignatureBI(c,a,b){var d=new RSAKey;d.setPublic(a,b);return d.doPublic(c)}function _rsasign_getHexDigestInfoFromSig(c,a,b){return _rsasign_getDecryptSignatureBI(c,a,b).toString(16).replace(/^1f+00/,"")}function _rsasign_getAlgNameAndHashFromHexDisgestInfo(c){for(var a in _RSASIGN_DIHEAD){var b=_RSASIGN_DIHEAD[a],d=b.length;if(c.substring(0,d)==b)return[a,c.substring(d)]}return[]}
function _rsasign_verifySignatureWithArgs(c,a,b,d){a=_rsasign_getHexDigestInfoFromSig(a,b,d);b=_rsasign_getAlgNameAndHashFromHexDisgestInfo(a);if(b.length==0)return!1;a=b[1];c=(0,_RSASIGN_HASHHEXFUNC[b[0]])(c);return a==c}function _rsasign_verifyHexSignatureForMessage(c,a){var b=parseBigInt(c,16);return _rsasign_verifySignatureWithArgs(a,b,this.n.toString(16),this.e.toString(16))}
function _rsasign_verifyString(c,a){var a=a.replace(/[ \n]+/g,""),b=this.doPublic(parseBigInt(a,16)).toString(16).replace(/^1f+00/,""),d=_rsasign_getAlgNameAndHashFromHexDisgestInfo(b);if(d.length==0)return!1;b=d[1];d=(0,_RSASIGN_HASHHEXFUNC[d[0]])(c);return b==d}RSAKey.prototype.signString=_rsasign_signString;RSAKey.prototype.signStringWithSHA1=_rsasign_signStringWithSHA1;RSAKey.prototype.signStringWithSHA256=_rsasign_signStringWithSHA256;RSAKey.prototype.verifyString=_rsasign_verifyString;
RSAKey.prototype.verifyHexSignatureForMessage=_rsasign_verifyHexSignatureForMessage;